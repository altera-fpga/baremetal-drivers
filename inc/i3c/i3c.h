#ifndef I3C_H
#define I3C_H

#include <stddef.h>
#include <stdint.h>

#ifdef __cplusplus
extern "C" {
#endif

// IOCTL Operations
typedef enum {
    I3C_IOCTL_READ_REGS,
    I3C_IOCTL_WRITE_REGS,
    I3C_IOCTL_CFG_SET,
    I3C_IOCTL_CFG_GET,
    I3C_IOCTL_CFG_IBA_INC_SET,
    I3C_IOCTL_CFG_IBA_INC_GET,
    I3C_IOCTL_CFG_I2C_PRESENT_SET,
    I3C_IOCTL_CFG_I2C_PRESENT_GET,
    I3C_IOCTL_CFG_HOT_JOIN_SET,
    I3C_IOCTL_CFG_HOT_JOIN_GET,
    I3C_IOCTL_CFG_DMA_ENABLE_SET,
    I3C_IOCTL_CFG_DMA_ENABLE_GET,
    I3C_IOCTL_CFG_ABORT_SET,
    I3C_IOCTL_CFG_ABORT_GET,
    I3C_IOCTL_CFG_RESUME_SET,
    I3C_IOCTL_CFG_RESUME_GET,
    I3C_IOCTL_CFG_ENABLE_SET,
    I3C_IOCTL_CFG_ENABLE_GET,
    I3C_IOCTL_DEVICE_ADDR_SET,
    I3C_IOCTL_DEVICE_ADDR_GET,
    I3C_IOCTL_HW_CAPABILITY_GET,
    I3C_IOCTL_COMMAND_QUEUE_PORT_SET,
    I3C_IOCTL_RESPONSE_QUEUE_PORT_GET,
    I3C_IOCTL_TX_DATA_PORT_SET,
    I3C_IOCTL_IBI_QUEUE_STATUS_GET,
    I3C_IOCTL_QUEUE_THLD_CTRL_SET,
    I3C_IOCTL_QUEUE_THLD_CTRL_GET,
    I3C_IOCTL_DATA_BUFFER_THLD_CTRL_SET,
    I3C_IOCTL_DATA_BUFFER_THLD_CTRL_GET,
    I3C_IOCTL_IBI_QUEUE_CTRL_SET,
    I3C_IOCTL_IBI_QUEUE_CTRL_GET,
    I3C_IOCTL_RESET_CONTROL_SET,
    I3C_IOCTL_RESET_CONTROL_GET,
    I3C_IOCTL_SLV_EVENT_STATUS_GET,
    I3C_IOCTL_SLV_EVENT_STATUS_SET,
    I3C_IOCTL_INTR_STATUS_GET,
    I3C_IOCTL_INTR_STATUS_SET,
    I3C_IOCTL_INTR_STATUS_EN_GET,
    I3C_IOCTL_INTR_STATUS_EN_SET,
    I3C_IOCTL_INTR_SIGNAL_EN_GET,
    I3C_IOCTL_INTR_SIGNAL_EN_SET,
    I3C_IOCTL_INTR_FORCE_SET,
    I3C_IOCTL_QUEUE_STATUS_LEVEL_GET,
    I3C_IOCTL_DATA_BUFFER_STATUS_LEVEL_GET,
    I3C_IOCTL_PRESENT_STATE_GET,
    I3C_IOCTL_DEVICE_ADDR_TABLE_PTR_GET,
    I3C_IOCTL_DEV_CHAR_TABLE_PTR_GET,
    I3C_IOCTL_DEV_CHAR_TABLE_PTR_SET_IDX,
    I3C_IOCTL_VENDOR_SPECIFIC_REG_PTR_GET,
    I3C_IOCTL_DEVICE_CONTROL_EXT_SET,
    I3C_IOCTL_DEVICE_CONTROL_EXT_GET,
    I3C_IOCTL_I3C_OD_TIMING_SET,
    I3C_IOCTL_I3C_OD_TIMING_GET,
    I3C_IOCTL_I3C_PP_TIMING_SET,
    I3C_IOCTL_I3C_PP_TIMING_GET,
    I3C_IOCTL_I2C_FM_TIMING_SET,
    I3C_IOCTL_I2C_FM_TIMING_GET,
    I3C_IOCTL_I2C_FMP_TIMING_SET,
    I3C_IOCTL_I2C_FMP_TIMING_GET,
    I3C_IOCTL_SCL_EXT_LCNT_TIMING_SET,
    I3C_IOCTL_SCL_EXT_LCNT_TIMING_GET,
    I3C_IOCTL_SCL_EXT_TERMN_LCNT_TIMING_SET,
    I3C_IOCTL_SCL_EXT_TERMN_LCNT_TIMING_GET,
    I3C_IOCTL_SDA_HOLD_SWITCH_DLY_TIMING_SET,
    I3C_IOCTL_SDA_HOLD_SWITCH_DLY_TIMING_GET,
    I3C_IOCTL_BUS_FREE_AVAIL_TIMING_SET,
    I3C_IOCTL_BUS_FREE_AVAIL_TIMING_GET,
    I3C_IOCTL_VERSION_ID_GET,
    I3C_IOCTL_VERSION_TYPE_GET,
    I3C_IOCTL_QUEUE_SIZE_CAPABILITY_GET,
    I3C_IOCTL_DEVICE_ADDRESS_TABLE_SET,
    I3C_IOCTL_DEVICE_ADDRESS_TABLE_GET,
    I3C_IOCTL_DEVICE_CHARACTERISTIC_TABLE_GET,

    // adding new elements before this line
    I3C_IOCTL_END
} i3c_ioctl_op_t;

typedef enum {
    I3C_MSG_TYPE_REGULAR = 0x0,
    I3C_MSG_TYPE_IMMEDIATE = 0x1,
    I3C_MSG_TYPE_ADDR_ASSIGN = 0x2,
    I3C_MSG_TYPE_WRITE_FOLLOWED_BY_RW = 0x3,
    I3C_MSG_TYPE_INTERNAL_CONTROL = 0x7
} i3c_xfer_attr_t;

typedef enum { SDR0 = 0, SDR1 = 1, SDR2 = 2, SDR3 = 3, SDR4 = 4, HDR_TS = 5, HDR_DDR = 6 } i3c_xfer_speed_t;

#define I3C_FLAGS_TERMINATE_ON_COMPLETION (uint32_t)((uint32_t)(1) << (uint32_t)(30))
#define I3C_FLAGS_RESPONSE_ON_COMPLETION (uint32_t)((uint32_t)(1) << (uint32_t)(30))
#define I3C_FLAGS_ADDR_ASSIGN_DEV_COUNT_SHIFT (uint32_t)(21)
#define I3C_FLAGS_ADDR_ASSIGN_DEV_COUNT_MASK (uint32_t)((uint32_t)(0xF) << I3C_FLAGS_ADDR_ASSIGN_DEV_COUNT_SHIFT)
#define I3C_FLAGS_ADDR_ASSIGN_DEV_COUNT(x)                                                                             \
    (uint32_t)(((x << I3C_FLAGS_ADDR_ASSIGN_DEV_COUNT_SHIFT)) & I3C_FLAGS_ADDR_ASSIGN_DEV_COUNT_MASK)

#define I3C_FLAGS_ADDR_ASSIGN_IDX_SHIFT (uint32_t)(16)
#define I3C_FLAGS_ADDR_ASSIGN_IDX_MASK ((uint32_t)(0xF) << I3C_FLAGS_ADDR_ASSIGN_IDX_SHIFT)
#define I3C_FLAGS_ADDR_ASSIGN_IDX(x)                                                                                   \
    (uint32_t)(((x << I3C_FLAGS_ADDR_ASSIGN_IDX_SHIFT)) & I3C_FLAGS_ADDR_ASSIGN_IDX_MASK)

#define I3C_FLAGS_0_READ_1_WRITE (uint32_t)((uint32_t)(1) << (uint32_t)(29))
#define I3C_FLAGS_XFER_SPEED_SHIFT (uint32_t)(26)
#define I3C_FLAGS_XFER_SPEED_MASK (uint32_t)((uint32_t)(0x7) << I3C_FLAGS_XFER_SPEED_SHIFT)
#define I3C_FLAGS_XFER_SPEED(x)                                                                                        \
    (((((uint32_t)((i3c_xfer_speed_t)(x))) << I3C_FLAGS_XFER_SPEED_SHIFT)) & I3C_FLAGS_XFER_SPEED_MASK)
#define I3C_FLAGS_DEVICE_INDEX_SHIFT (uint32_t)(16)
#define I3C_FLAGS_DEVICE_INDEX_MASK (uint32_t)((uint32_t)(0xF) << I3C_FLAGS_DEVICE_INDEX_SHIFT)
#define I3C_FLAGS_DEVICE_INDEX(x) (uint32_t)(((x << I3C_FLAGS_DEVICE_INDEX_SHIFT)) & I3C_FLAGS_DEVICE_INDEX_MASK)
#define I3C_FLAGS_COMMAND_PRESENT (uint32_t)((uint32_t)(1) << (uint32_t)(15))
#define I3C_FLAGS_COMMAND_CODE_SHIFT (7)
#define I3C_FLAGS_COMMAND_CODE_MASK (uint32_t)((uint32_t)(0xFF) << I3C_FLAGS_COMMAND_CODE_SHIFT)
#define I3C_FLAGS_COMMAND_CODE(x) (uint32_t)(((x << I3C_FLAGS_COMMAND_CODE_SHIFT)) & I3C_FLAGS_COMMAND_CODE_MASK)
#define I3C_FLAGS_TRANSACTION_ID_SHIFT (uint32_t)(3)
#define I3C_FLAGS_TRANSACTION_ID_MASK ((uint32_t)(0xF) << I3C_FLAGS_TRANSACTION_ID_SHIFT)
#define I3C_FLAGS_TRANSACTION_ID(x) (uint32_t)(((x << I3C_FLAGS_TRANSACTION_ID_SHIFT)) & I3C_FLAGS_TRANSACTION_ID_MASK)
#define I3C_FLAGS_XFER_ATTR_SHIFT (uint32_t)(0)
#define I3C_FLAGS_XFER_ATTR_MASK ((uint32_t)(0x7) << I3C_FLAGS_XFER_ATTR_SHIFT)
#define I3C_FLAGS_XFER_ATTR(x)                                                                                         \
    ((((uint32_t)((i3c_xfer_attr_t)(x)) << I3C_FLAGS_XFER_ATTR_SHIFT)) & I3C_FLAGS_XFER_ATTR_MASK)

// POSIX-compliant APIs
int32_t i3c_open(const char *name, int32_t flags);
int32_t i3c_close(int32_t fd);
size_t i3c_write(int32_t fd, uintptr_t buf, size_t count);
size_t i3c_send(int32_t fd, const uintptr_t buf, size_t length, int32_t flags);
size_t i3c_read(int32_t fd, uintptr_t buf, size_t count);
size_t i3c_recv(int32_t fd, uintptr_t buf, size_t count, int32_t flags);
int32_t i3c_ioctl(int32_t fd, int32_t request, uintptr_t arg, size_t length);
int32_t i3c_error(int32_t fd);

#ifdef __cplusplus
}
#endif

#endif // I3C_H
