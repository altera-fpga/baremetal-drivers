#ifndef spi_H__
#define spi_H__

#include <stddef.h>
#include <stdint.h>

typedef enum {
    IOCTL_SPI_REGS_READ,
    IOCTL_SPI_REGS_WRITE,
    IOCTL_SPI_SET_FRAME_FORMAT,
    IOCTL_SPI_GET_FRAME_FORMAT,
    IOCTL_SPI_SET_FRAME_SIZE,
    IOCTL_SPI_GET_FRAME_SIZE,
    IOCTL_SPI_SET_CONTROL_FRAME_SIZE,
    IOCTL_SPI_GET_CONTROL_FRAME_SIZE,
    IOCTL_SPI_SET_TRANSFER_MODE,
    IOCTL_SPI_GET_TRANSFER_MODE,
    IOCTL_SPI_SET_CLOCK_POLARITY,
    IOCTL_SPI_GET_CLOCK_POLARITY,
    IOCTL_SPI_SET_CLOCK_PHASE,
    IOCTL_SPI_GET_CLOCK_PHASE,
    IOCTL_SPI_SET_NUM_DATA_FRAMES,
    IOCTL_SPI_GET_NUM_DATA_FRAMES,
    IOCTL_SPI_SET_SSI_ENABLE,
    IOCTL_SPI_GET_SSI_ENABLE,
    IOCTL_SPI_SET_MW_TRANSFER_MODE,
    IOCTL_SPI_GET_MW_TRANSFER_MODE,
    IOCTL_SPI_SET_MW_CONTROL,
    IOCTL_SPI_GET_MW_CONTROL,
    IOCTL_SPI_SET_MW_HANDSHAKE,
    IOCTL_SPI_GET_MW_HANDSHAKE,
    IOCTL_SPI_SET_CS,
    IOCTL_SPI_GET_CS,
    IOCTL_SPI_SET_BAUD_RATE,
    IOCTL_SPI_GET_BAUD_RATE,
    IOCTL_SPI_SET_TX_FIFO_THRESHOLD,
    IOCTL_SPI_GET_TX_FIFO_THRESHOLD,
    IOCTL_SPI_SET_RX_FIFO_THRESHOLD,
    IOCTL_SPI_GET_RX_FIFO_THRESHOLD,
    IOCTL_SPI_GET_TX_FIFO_LEVEL,
    IOCTL_SPI_GET_RX_FIFO_LEVEL,
    IOCTL_SPI_GET_STATUS,
    IOCTL_SPI_GET_INTERRUPT_MASK,
    IOCTL_SPI_SET_INTERRUPT_MASK,
    IOCTL_SPI_GET_INTERRUPT_STATUS,
    IOCTL_SPI_GET_RAW_INTERRUPT_STATUS,
    IOCTL_SPI_CLEAR_TX_OVERFLOW_INTERRUPT,
    IOCTL_SPI_CLEAR_RX_OVERFLOW_INTERRUPT,
    IOCTL_SPI_CLEAR_RX_UNDERFLOW_INTERRUPT,
    IOCTL_SPI_CLEAR_MULTI_MASTER_INTERRUPT,
    IOCTL_SPI_CLEAR_INTERRUPT,
    IOCTL_SPI_GET_DMA_CONTROL,
    IOCTL_SPI_SET_DMA_CONTROL,
    IOCTL_SPI_GET_DMA_TX_THRESHOLD,
    IOCTL_SPI_SET_DMA_TX_THRESHOLD,
    IOCTL_SPI_GET_DMA_RX_THRESHOLD,
    IOCTL_SPI_SET_DMA_RX_THRESHOLD,
    IOCTL_SPI_GET_ID,
    IOCTL_SPI_GET_VERSION,
    IOCTL_SPI_GET_RX_SAMPLE_DLY,
    IOCTL_SPI_SET_RX_SAMPLE_DLY,

    // adding new elements before this line
    IOCTL_SPI_END
} spi_ioctl_op_t;

int32_t spi_open(const char *name, int32_t flags);
int32_t spi_close(int32_t fd);
size_t spi_recv(int32_t fd, uintptr_t buf, size_t size, int32_t flags);
size_t spi_read(int32_t fd, uintptr_t buf, size_t size);
size_t spi_write(int32_t fd, const uintptr_t buf, size_t size);
size_t spi_send(int32_t fd, const uintptr_t buf, size_t size, int32_t flags);
int32_t spi_ioctl(int32_t fd, int32_t request, uintptr_t arg, size_t length);
int32_t spi_error(int32_t fd);

#endif // spi_H__